// language: metal1.0
#include <metal_stdlib>
#include <simd/simd.h>

using metal::uint;


template<typename R, typename T, typename A> R __make_atomic_cas_result(device A* ptr, T cmp_, T v) {
    T cmp = cmp_;
    bool exchanged = metal::atomic_compare_exchange_weak_explicit(ptr, &cmp, v, metal::memory_order_relaxed, metal::memory_order_relaxed);
    return R{cmp, exchanged};
}
        
struct type_1 {
    float inner[2];
};
struct Ah {
    type_1 inner;
};

kernel void cs_main(
  device Ah const& ah [[user(fake0)]]
) {
    Ah ah_1 = ah;
}
