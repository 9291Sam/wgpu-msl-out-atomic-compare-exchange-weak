// language: metal1.0
#include <metal_stdlib>
#include <simd/simd.h>

using metal::uint;


template<typename R, typename T, typename A> R __make_atomic_cas_result(device A* ptr, T cmp_, T v) {
    T cmp = cmp_;
    bool exchanged = metal::atomic_compare_exchange_weak_explicit(ptr, &cmp, v, metal::memory_order_relaxed, metal::memory_order_relaxed);
    return R{cmp, exchanged};
}
        
struct type_1 {
    int member;
};

void function(
    device type_1& unnamed
) {
    int _e3 = unnamed.member;
    unnamed.member = _e3 + 1;
    return;
}

kernel void main_(
  device type_1& unnamed [[user(fake0)]]
) {
    function(unnamed);
}
