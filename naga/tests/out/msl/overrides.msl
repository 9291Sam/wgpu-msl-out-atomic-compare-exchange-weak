// language: metal1.0
#include <metal_stdlib>
#include <simd/simd.h>

using metal::uint;


template<typename R, typename T, typename A> R __make_atomic_cas_result(device A* ptr, T cmp_, T v) {
    T cmp = cmp_;
    bool exchanged = metal::atomic_compare_exchange_weak_explicit(ptr, &cmp, v, metal::memory_order_relaxed, metal::memory_order_relaxed);
    return R{cmp, exchanged};
}
        
constant bool has_point_light = false;
constant float specular_param = 2.3;
constant float gain = 1.1;
constant float width = 0.0;
constant float depth = 2.3;
constant float height = 4.6;
constant float inferred_f32_ = 2.718;

kernel void main_(
) {
    float gain_x_10_ = 11.0;
    float store_override = {};
    float t = 23.0;
    bool x = {};
    float gain_x_100_ = {};
    x = true;
    float _e9 = gain_x_10_;
    gain_x_100_ = _e9 * 10.0;
    store_override = gain;
    return;
}
