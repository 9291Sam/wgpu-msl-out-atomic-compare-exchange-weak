// language: metal1.0
#include <metal_stdlib>
#include <simd/simd.h>

using metal::uint;


template<typename R, typename T, typename A> R __make_atomic_cas_result(device A* ptr, T cmp_, T v) {
    T cmp = cmp_;
    bool exchanged = metal::atomic_compare_exchange_weak_explicit(ptr, &cmp, v, metal::memory_order_relaxed, metal::memory_order_relaxed);
    return R{cmp, exchanged};
}
        
struct type_1 {
    float inner[2];
};

type_1 ret_array(
) {
    return type_1 {1.0, 2.0};
}

struct main_Output {
    metal::float4 member [[color(0)]];
};
fragment main_Output main_(
) {
    type_1 _e0 = ret_array();
    return main_Output { metal::float4(_e0.inner[0], _e0.inner[1], 0.0, 1.0) };
}
